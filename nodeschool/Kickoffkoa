These are solutions to the Kickoffkoa series of challenges 
*** Koa will not work on any Node version below 0.11.13


Level 1 Hello Koa -
As this is the first challenge of the series this should be a fairly basic challenge to ensure that all is working
for challenges further down the line. The official definition of the task is this -
Create a koa server that listens on a port passed from the command line and replies with "hello koa" when an 
HTTP GET request is sent to /.

The workshop will execute requests against the server and verify the output.
This will be easy as the hints give most if not all of the code needed so the solution will be -

var koa = require('koa');
var app = koa();
var port = process.argv[2];

app.use(function* (){
    this.body = 'hello koa';
});

app.listen(port);

Easy enough after reinstalling everything as node version was not high enough.



Level 2 Routing -
The task for the second challege is as follows -
Create a koa server that listen on a port passed from the command line, and returns the following responses from 
the following routes:

    /    - hello koa
    /404 - page not found
    /500 - internal server error
There are plenty of hints available from the accompanying material so the solution should be quick enough and should
look like this :

var koa = require('koa');
var app = koa();
var port = process.argv[2];

app.use(function* (next){
    if (this.path !== '/') {
        return yield next;
    }
    
    this.body = 'hello koa';
});

app.use(function* (next){
    if (this.path !== '/404') {
        return yield next;
     }
     
     this.body = 'page not found';
});

app.use(function* (next){
    if (this.path !== '/500') {
        return yield next;
     }
     
     this.body = 'internal server error';
});

app.listen(port);



Level 3 Request_body -
The third challenge has the following as its task -
Create a koa server which parse the post data, Convert the name field to
upper case and respond to client.

If you get this:

    POST / with { name: 'koa' }

Respond with:

    KOA
Again there are plenty of hints to accompany this challenge and the solution should look like the following -

var koa = require('koa');
var parse = require('co-body');
var app = koa();
var port = process.argv[2];

app.use(function* (next){
    if(this.method !== 'POST'){
        return yield next;
    }
    
    var body = yield parse(this);
    this.body = body.name.toUpperCase();
});

app.listen(port);



Level 4 Response Body -
This is the fourth challenge and the task on this occasion is related to the previous one, the task according to
the information on the challenge is -
Create an app that returns a stream when the client requests /stream and a JSON body when the client requests /json.

When /json is requested, the output should be

    { foo: 'bar' }

When /stream is requested, the server should respond with the content in file process.argv[3]. Use fs.createReadStream:

    fs.createReadStream(process.argv[3]);
This again is similar to both the previous challenge and also the stream adventure series of challenges. By using a
combination of both the solution should be quick and should look like this -

var koa = require('koa');
var parse = require('co-body');
var fs = require("fs");
var app = koa();
var port = process.argv[2];
var fStream = process.argv[3];

app.use(function*(next){
    if(this.path !== '/json'){
        return yield next;
    }
    
    this.body = { foo: 'bar' };
});

app.use(function*(next){
    if(this.path !== '/stream'){
        return yield next;
    }
    
    this.body = fs.createReadStream(fStream);
});

app.listen(port);

As can be seen this is a combination of the previous challenges and some other challenges from the stream series.




Level 5 Content Headers -
This is the fifth of eleven in the series and according to the documentation the task this time is -
Create an app that checks the Content-Type of the request. If it's application/json, return {message: 'hi!'} with 
appropriate content headers. Otherwise, return ok as a string.
There are also quite a lot of hints on how to resolve this challenge so using them alongside previous challenges 
and the code written should take a lot of the guesswork away which means the solution should look like -

var koa = require('koa');
var app = koa();
var port = process.argv[2];

app.use(function*(){
    this.body = this.request.is('json') ? {message: 'hi!'} : 'ok';
});
app.listen(port);

There are a couple of ways that could have been used to solve this but a ternary equation rather than a loop makes
things much shorter.




Level 6 Middleware -
The task is this challenge is to -
Complete the Koa application below, finish two middlewares:

  * responseTime: record each request's response time(ms), set the response header `X-Response-Time`.
  * upperCase: convert response body to upper case.
 There are a lot of hints as most of the code is written and only a few things need to be changed. The solution
 and task combo should look like this - 
 
 var koa = require('koa');
var app = koa();
var port = process.argv[2];

app.use(responseTime());
app.use(upperCase());

app.use(function* () {
      this.body = 'hello koa';
});
    
function responseTime() {
  return function* (next) {
    var start = new Date;
    yield next;
    this.set('X-Response-Time', new Date - start);
};
}

function upperCase() {
  return function* (next) {
    yield next;
    
    this.body = this.body.toUpperCase();
  };
}

app.listen(port); 




Level 7 Error Handling -
In this level the task that must be completed is -
Add an error handler middleware for the koa application below.
The errorHandler middlware should catch all the downstream errors,
then responds to the client with internal server error and status 500.
As with all of the other challenges there are a lot of hints in the accompanying documentation and also some
boilerplate code. This means that a lot of the solution is already done like the previous challenge and so the
solution\challenge combo will look like this -

var koa = require('koa');
var app = koa();
var port = process.argv[2];

app.use(errorHandler());

app.use(function* () {
      if (this.path === '/error') {
            throw new Error('ooops');
      }    
      this.body = 'OK';
    });
    
function errorHandler() {
  return function* (next) {
    try{
        yield next;
    }catch(err){
        this.body = 'internal server error';
        this.status = 500;
    }
  };
}

app.listen(port);  

As can be seen there is not much new code but apparently koa is different from other frameworks due to the try\catch
block being used.




Level 8 Cookie -
This is the eight challenge of the series and this time the task is to -
Create an app that use cookie to store user's view times.

  * cookie's key is `view`, you need store the view times in this cookie.
  * every time request the server, respond must be `{time} views`.
  * cookie need be `signed`

visit /:
=>
respond body: 1 views
set-cookie: view=1

visit / again:
=>
respond body: 2 views
set-cookie: view=2

As is standard there are plenty of hints which will be used is solving the challenge. This is a slight bit of a 
departure from the previous sections but again using the hints and previus examples should significantly reduce
the amount of work needed on the challenge. The solution should look like -

var koa = require('koa');
var app = koa();
app.keys = ['secret', 'keys'];
var port = process.argv[2];

app.use(function* (){
    var num;
    num = ~~this.cookies.get('view', {signed: true}) + 1;
    this.cookies.set('view', num, {signed: true});
    this.body = num + ' views';
});

app.listen(port); 

I had to get some help on this as math.floor was causing issues on the first iteration, this is where the double 
tilde comes in as it is a faster replacement apparently.




Level 9 Session -
In the ninth challenge the task to be completed is - 
In the previous exercise, we learned how to use cookies to store the user's
view times.  But in this exercise, we will try to use sessions to do the same
thing.

visit /:
=>
respond body: 1 views
set-cookie: koa:sess=…

visit / again:
=>
respond body: 2 views
set-cookie: koa:sess=…

As is stated this is a reworking of the previous challenge so the solution should look a lot like the previous
solution too. There are also plenty of hints so that should go a long way to solving the issues. The solution
should therefore look like this -

var koa = require('koa');
var session = require('koa-session');
var port = process.argv[2];
var app = koa();
app.keys = ['secret', 'keys'];
    
app.use(session(app));

app.use(function* (){
    var num;
    num = ~~this.session.view + 1;
    this.session.view = num;
    this.body = num + ' views';
});

app.listen(port); 

As I am having issues with the install of koa session I am not able to verify the solution but I have asked and
this seems ok.




Level 10 Templating -
This is the tenth and penultimate challenge of the series and this time the task is to -
Create a koa server that listens on a port passed from the command line and replies with HTML, which is processed 
ejs template file when an HTTP GET request is sent to /.

The workshop will execute requests against the server and verify the output.

Again there are plenty of hints and boilerplate code and combined with previous examples should considerably leesen
the work needed. The solution itself will look like this -

var koa = require('koa');
var views = require('co-views');
var port = process.argv[2];
var app = koa();

var render = views(__dirname + '/views', {
      ext: 'ejs'
});

var user = {
      name: {
        first: 'Tobi',
        last: 'Holowaychuk'
      },
      species: 'ferret',
      age: 3
};

app.use(function* (){
    this.body = yield render('user', {user : user});
});

app.listen(port); 
There is also a second file but the code involved is already given as part of the hints section. As it transpires
there is only one line of new code needed to complete the challenge as the rest is boilerplate from the hints or
previous examples and the rendering is all that needs to be done.




Level 11 Authentication - 
This is the final challenge of the series and the task here is the following -
In previous exercies, we learned route, body-parser and session. In this exercise, we will try to combine them all 
to create a very simple app with login and logout features. Let's define the following routes:

  * `/` - If the user is logged in, they should see `hello world`. Otherwise, they should see a `401` error because 
  they aren't logged in.
  * `/login` - if the method is `GET`, a form should be returned. If the method is `POST`, it should validate the 
  request body and attempt to login the user, if login successful redirected to `/`.
  * `/logout` - it should logout the user and redirected to `/login`.

We're not actually going to create users in this example. The only acceptable authentication is:

    username = username
    password = password

other authentication all should get 400 error.

As can be seen this is an amalgamation of previous challenges and the accompanying hints contain most of the work
already done in boilerplate so the combo challenge solution will be -

var koa = require('koa');
var parse = require('co-body');
var session = require('koa-session');
var form = '<form action="/login" method="POST">\
              <input name="username" type="text" value="username">\
              <input name="password" type="password" placeholder="The password is \'password\'">\
              <button type="submit">Submit</button>\
            </form>';
    
var app = koa();
var port = process.argv[2];
app.keys = ['secret1', 'secret2', 'secret3'];
app.use(session(app));

app.use(function* home(next) {
    if (this.request.path !== '/') return yield next;
    if (this.session.authenticated) return this.body = 'hello world';
    this.status = 401;
});

app.use(function* login(next) {
    if (this.request.path !== '/login') return yield next;
    if (this.request.method === 'GET') return this.body = form;
    if (this.request.method !== 'POST') return;
    
    var body = yield parse(this);
    if(body.username !== 'username' || body.password !== 'password') return this.status = 400;
    
    this.session.authenticated = true;
    this.redirect('/');
});

app.use(function* logout(next) {
  if (this.request.path !== '/logout') return yield next;
  
  this.session.authenticated = false;
  this.redirect('/login');

});
    
app.listen(port); 
