To get started with learnyounode, install using

npm install -g learnyounode

1 Hello World - 
Make a file,
add console.log('HELLO WORLD') and save
Run the file using node filename and verify.


2 Baby Steps - 
Several ways are available to do this but using a loop is easiest,
as before have a file made and opened, my solution is similar to the 
official one which opens when completed. This is the official completion
var result = 0

for (var i = 2; i < process.argv.length; i++)
  result += Number(process.argv[i])

console.log(result)

******* There are other solutions involving slice which should be investigated.



3 My First IO - 
Like before there are several solutions but the are parameters which must be followed 
- fs module is required to be able to perform filesystem operations.
- readFileSync is also needed as all fs module ops which are synchronous end with sync.
The solution is - 
var fs = require("fs");

var filename = process.argv[2];

var contents = fs.readFileSync(filename).toString();

console.log(contents.split('\n').length - 1);

where you have included the fs module, taken in the file, converted to string and then split 
and sent to the console. The process.argv has a 2 because the test file is located as the third
item and arrays are zero indexed. This can be checked by passing the process.argv to the console.



4 My First Async IO -
This is almost the same as the previous exercise except that the file now needs to be handled
asynchronously. This means that instead of fs.readFileSync() it will be fs.readFile() and instead
of using a return value this needs to be obtained using a callback function. The solution is therefore this
var fs = require("fs");

var file = process.argv[2];

fs.readFile(file, 'utf-8', function(err,file){
    console.log(file.split('\n').length - 1);
});

As the documentation states 'utf-8' can be passed in as a parameter which means that you will get a string
rather than a buffer.



5 Filtered LS -
This asks you to print a list of files from a given directory. The fs.readdir() method is needed and it takes
a pathname as its first argument and a callback function as its second. The documentation also suggests using 
the path module and the first argument will be the directory name and then the extension which will need to be 
matched e.g. if files end in .txt then it will need to be filtered using .txt  The solution is this
var fs = require("fs");
var path = require("path");
var directoryPath = process.argv[2];
var fileExtension = process.argv[3];


fs.readdir(directoryPath, function(err,list){
    list.forEach(function (filename) {
    if (path.extname(filename) === '.' + fileExtension) {
      console.log(filename);
    }
  });
});

Basically the solution I used is to have all the requirements both needed and recommended, assign variables
to the process.argv locations. Use the readdir function which takes firstly the directory path and then a
callback function which itself takes err and the list as its arguments. Then using a foreach loop against the
list a function is called which takes the filename as its sole argument, if using the path.extname method which is
passed in the filename the file extension matches then it is sent to the console.


*********************************************************************************************************
Important - The challenge says that you must use Async IO
*********************************************************************************************************


6 Make it Modular - This level introduces the concept of modules, it is similar to the previous level and a lot
of the code can be reused. There are a couple of important caveats, you can only print to the console from the 
main file not from within the module file and the module file must do most of the work and that the function being 
exported takes 3 arguments. There are also the usual standard conventions that are expected to be followed. With 
that in mind the solution is this The main file is as ever program.js and had this code -

var module = require('./module.js');
var directoryPath = process.argv[2];
var fileExtension = process.argv[3];
 
module(directoryPath, fileExtension, function (err, files) {
    if (err) {
        console.error(err);
        return;
    }
    files.forEach(function (el) {
        console.log(el);
    });
});    
    
The module file which I just named module.js has this code -

var fs = require("fs");
var path = require("path");
var files = [];

module.exports = function(directoryPath, fileExtension, callback){

    fs.readdir(directoryPath, function(err, files){
        if(err){
            return callback(err);
        }
        
         files = files.filter(function (el) {
            if (path.extname(el).slice(1) === fileExtension) {
                return el;
            }
        });
        
        return callback(null, files);
    });
};

As you can see it is indeed a lot like the previous challenge but this time a lot of work was hived off into 
the module thus enabling reuse.


7 HTTP-Client - This exercise asks that you write a program that performs an HTTP GET request to a
URL provided to you as the first command-line argument. You will require the http module in order to
proceed and like before using 'utf-8' as an argument means that strings are returned which is a cleaner
solution. The solution is like this

var http = require("http");
var exerciseUrl = process.argv[2];

http.get(exerciseUrl, function(res) {
	res.setEncoding('utf8')
	res.on('data', function(data) {
		console.log(data)
	})
})

As before the process.argv location is assigned to a variable and the passed into the get along with a
function which sets the encoding to utf-8 to return a string. Using the res.on data is passed in and then
on to the console.

8 HTTP-Collect - This challenge is again somewhat similar to the previous one. You are asked to write a program 
that performs an HTTP GET request to a URL provided to you as the first command-line argument. Collect all data 
from the server (not just the first "data" event) and then write two lines to the console (stdout). The first line 
you write should just be an integer representing the number of characters received from the server. The second line 
ld contain the complete String of characters sent by the server. According to the documentation there are a couple
of ways that the exercise can be completed, the first is to collect data across multiple "data" events and append 
the results together prior to printing the output, this will have to have an end added so that when the stream ends
the output can be written. The second solution offers the opportunity to use a third party solution and suggests a
couple which would need to be installed and required. The solution I chose was the second one as it appears to be
the cleaner, the solution is this - 

var http = require("http");
var exerciseUrl = process.argv[2];
var bl = require("bl");

http.get(exerciseUrl, function(res) {
	res.pipe(bl(function(err, data) {
		var str = data.toString();

		console.log(str.length);
		console.log(str);
	}))
});

The syntax for using bl rather than concat-stream is slightly different but not that much so is easy to change.






