These are my solutions to the Nodeschool Bytewiser set of challanges.

Level 1  Buffer From String -
This is a simple challenge to get started which is to  write a node program that prints a buffer object containing
the string "bytewiser" using console.log. The solution is fairly obvious 

console.log(new Buffer("bytewiser"));




Level 2 Hexadecimal Encoding -
This challenge according to the site itself asks that given an unknown number of bytes passed via process.argv, 
create a buffer from them and output a hexadecimal encoded representation of the buffer. The answer should be a string
of two-character pairs (also known as hexadecimal octets), where each pair represents a single number in the array of 
bytes converted to hexadecimal. My solution is pretty much the same as the official one, it looks like this

var port = process.argv;
var bytes = port.slice(2).map(parseFloat);
console.log(new Buffer(bytes).toString('hex'));

I did try using parseInt instead of parseFloat but it only worked for one test, also number can be used instead of
parseFloat.




Level 3 Modifiying Buffers -
In this challenge we are asked to write a program that takes the first buffer written to process.stdin, updates all 
instances of . with ! and then logs out the updated buffer object. The site also says that there are bonus points if
you never call .toString() on your buffer!. The solution then would be this 

process.stdin.on('data', function(buffer){
    for (var i = 0; i < buffer.length; i++ ) {
        if(buffer[i] === 46){
            buffer.write('!', i);
        }
    }
    console.log(buffer);
    
});

The official solution is well worth a look as it does things slightly differently like so 

var DOT = '.'.charCodeAt(0), BANG = '!'.charCodeAt(0)
    
    process.stdin.on('data', function(buff) {
      for (var i = 0; i < buff.length; i++) {
        if (buff[i] === DOT) buff[i] = BANG
      }
      console.log(buff);
    });
    
Either method works but I do like the fact that the characters are assigned to variables.    



Level 4 Line Splitter -
In this challenge you are told that the argument given to you from process.argv[2] will be a path to a file. You 
will need to read this file and split it by newline characters ('\n'). and that you should log one Buffer per line.
Also the site states that there will be bonus points if you never use .toString(). This is very similar to other
challenges from different sections. You are also told that there are Extra bonus points if you avoid using 
fs.readFileSync. With the various hints and previous code the solution should look like 

var fs = require("fs");
var filePath = process.argv[2];

fs.readFile(filePath, function(err, data){
    var current = 0;
    if(err){
        throw err;
    }else{
        for(var i = 0; i < data.length; i++){
            if(data[i] === 10){
                 console.log(data.slice(current, i)); 
                 current = i + 1;
            }
        }
    }
    console.log(data.slice(current, i));
});

This is a solution from another challenge in a different exercise I have done with a couple of changes made to fit 
this particlar challenge, the official solution is different but also well worth a look

var fs = require('fs')
var file = fs.readFileSync(process.argv[2])
var offset = 0, NL = '\n'.charCodeAt(0)
    
    for (var i = 0; i < file.length; i++) {
      if (file[i] === NL) {
        console.log(file.slice(offset, i))
        i++
        offset = i
      }
    }
    console.log(file.slice(offset, i)
    
As you can see the official solution uses readFileSync and is probably a cleaner solution.    



Level 5 Buffer Concat -
In this challenge we are asked to write a program that combines all of the buffers from process.stdin and then 
writes the single big buffer out to the console and there are bonus points if using a stream. This is again similar
to challenge from another set so that will be of use here along with the hints. The streams are very interesting
as using the on('data') sets the stream to a sort of flow which 'end' stops. There are more intelligent ways of
handling streams but this way is sufficient  

var bufferData = [];

process.stdin.on('data', function(buffer){
    bufferData.push(buffer);
});

process.stdin.on('end', function() {
    var outputData = Buffer.concat(bufferData);
    console.log(outputData);
});

As you can see everything is fairly self explanatory but again the official solution can be learned from

  var buffers = [];
    
    process.stdin.on('readable', function() {
      var chunk = process.stdin.read();
      if (chunk !== null) {
        buffers.push(chunk);
      }
    });
    
    process.stdin.on('end', function() {
      console.log(Buffer.concat(buffers));
    });

As you can see they use read on the process.stdin which is probably has better control of the stream.    



Level 6 Typed Arrays -
This is the penultimate challenge in bytewiser and we are asked to read the first buffer from process.stdin, 
copy all bytes into a Uint8Array and then log out a JSON stringified representation of the typed array. The 
Uint8Array is an unsigned int array and operates similar to buffer. The solution seems fairly easy as it will use a
lot of the code written in the previous example with a few modifications like this 

process.stdin.on('data', function(buffer){
    var typeArr = new Uint8Array(buffer.length);
    
    for(var i = 0; i < buffer.length; i++){
        typeArr[i] = buffer[i];
    }
    
    console.log(JSON.stringify(typeArr));
});

Also the official solution is very clean and I like this more than mine

process.stdin.once('data', function(buff) {
      var ui8 = new Uint8Array(buff)
      console.log(JSON.stringify(ui8))
    })



Level 7 Array Buffers -
In this the final challenge of bytewiser we are asked to take an integer from process.argv[2] and write it as the 
first element in a single-element Uint32Array. Then create a Uint16Array from the Array Buffer of the Uint32Array 
and log out to the console the JSON stringified version of the Uint16Array. This challenge is very similar to the
previous challenge but there will have to be changes for example Uint32 will be different from the Uint8 array. The
solution is fairly simple 

var input = process.argv[2];
var u32Arr = new Uint32Array(1);

u32Arr[0] = input;

var u16arr = new Uint16Array(u32Arr.buffer);

console.log(JSON.stringify(u16arr));

The official solution also follows this path.
