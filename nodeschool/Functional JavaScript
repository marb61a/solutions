These are my solutions to the Nodeschool Functional Javascript Challenges

Level 01 Hello World -
As usual the first level is fairly easy which in this case is to take an input string and return it uppercased. This
is the solution although there are more ways to do the same.

module.exports = function upperCaser(input) {
     
      return input.toUpperCase();
    };



Level 02 - Higher Order Functions -
The second challenge is about how javascript handles functions particularly compared to other languages. You are asked
to implement a function that takes a function as its first argument, a number num as its second argument, then 
executes the passed in function num times. As before you are warned not to overthink the solution and again there is
boilerplate code provided. This is the solution I used

module.exports = function repeat (operation, num){
      if(num === 0){
            return;
      }
      operation();
      return repeat(operation, num -1);
};

There are other similar ways to solve this including assigning a variable to the function and then calling like this

function repeat (operation, num){
      if(num === 0){
            return;
      }
      operation();
      return repeat(operation, num -1);
}

module.exports = repeat;

Both of these and several others are equally valid.


Level 03 Basic Map -
In this challenge the task is to convert a for loop into an Array Map. There is as standard boilerplate code that
you must use. There are also 3 conditions that must be followed, Your solution should use Array.prototype.map(), do 
not use any for/while loops or Array.prototype.forEach and do not create any unecessary functions e.g. helpers. The
for loop itself basically multiplies the numbers that it gets by 2. The solution is this

function doubleAll(numbers) {
      return numbers.map(function(num){
            return num * 2;
      });
    }
    
module.exports = doubleAll;

Its easy enough to follow and shows the value of things like map.




Level 04 - Basic Filter
According to the documentation the challange on this level is to use Array#filter to write a function called 
getShortMessages. The getShortMessages function takes an array of objects with '.message' properties and returns 
an array of messages that are less than < 50 characters long. The function should also return an array containing 
the messages themselves, without their containing object. Ther is some boilerplate code attached that we must use
and we are told not to use unnecessary loops etc and to try using chaining array methods. The solution should look
like this

module.exports = function getShortMessages(messages){
      var messageFilter = messages.filter(function(msg){
            if(msg.message && msg.message.length < 50){
                  return messages;
            }
      });
      
      return messageFilter.map(function(msg){
            return msg.message;
      });
};

I had to get some help with this as I was not returning properly in the map function, I was returning messages when
is should have been the singular.



Level 05 - Every Some -
In this challenge we are asked to return a function that takes a list of valid users, and returns a function that 
returns true if all of the supplied users exist in the original list of users. As is usual there is boilerplate code
supplied and we are told that we only need to check that the ids match. We are alos given the standard warnings
about unnecessary code etc. This challenge also uses the every() method which returns true eturns true if every 
element in the list satisfies the provided testing function, this is also related to the some() method tests whether 
some element in the array passes the test implemented by the provided function. The solution is essentially just a
set of returning functions provideing a scondition is met, here it is

module.exports = function checkUsersValid(goodUsers){
      return function allUsersValid(submittedUsers){
            return submittedUsers.every(function(submittedUser){
                 return goodUsers.some(function(goodUser){
                       return goodUser.id === submittedUser.id;
                 }) ;
            });
      };
};

The majority of the code is given in the documentation and then the condition is too which means that it is only the
every and some functions which need to be implemented. 




Level 06 Basic Reduce -
In this challenge the task is given an Array of strings, use Array#reduce to create an object that contains the 
number of times each string occured in the array and is it necessary to return the object directly. There is as 
usual boilerplate code and warnings. The syntax for array.reduce is array.reduce(callback[, initialValue]); where
callback is the function to execute on each value in the array and initialValue is an object to use as the first 
argument to the first call of the callback. All that being said the solution should look like this

module.exports = function countWords(inputWords) {
      return inputWords.reduce(function(totalWords, singleWord){
            if(totalWords[singleWord]){
                  totalWords[singleWord] +=1;
            }else{
                  totalWords[singleWord] = 1;
            }
            return totalWords;
      }, {});
    };
    
 Granted this is not the most imaginative solution but it worked in the end as I had trouble due to missing curly 
 brackets at the end which are important as the second argument to reduce initialises totalWords to {}.



 Level 07 Basic Recursion -
 In this the seventh challenge we are tole that point of this exercise is to familiarise yourself with recursion by
 implementing a familiar interface using a recursive function. The task itself is to implement recursion using the
 array#reduce which the site informs us will be used to test your reduce implementation to execute our solution to 
 the previous basic_reduce problem. there is as always boilerplate code provided and the usual warnings about code 
 are given. There is a sample recursive function among the documentation which along with the boilerplate code
 should take us a long way towards a solution. My solution is
 
 module.exports = function reduce(arr, fn, initial) {
      if(!arr.length) {
            return initial;
      }else{
            var head = arr[0];
            var tail = arr.slice(1);
            return reduce(tail, fn,  fn(initial, head));
      }
    };
  
  You will probably notice that the structure is the same as previous solutions, I combined this structure with the
  sample function in the documentation and this gave the solution. The documentaion also gives a much better 
  description of the function arguments than I so here they are.
  * arr: An Array to reduce over
  * fn: Function to use as the reduction step. Like regular Array#reduce, this function must be passed previousValue, 
  currentValue, index and the array we're iterating over.
  * init: Initial value of the reduction. Unlike Array#reduce, this value is required (and you may assume it will 
  always be supplied).
 
