These are my solutions to the Nodeschool Expressworks exercises.

Level 1 Hello World -
The first exercise is as always an easy on we are asked to create an Express.js app that outputs "Hello World!" when 
somebody goes to /home. Also there are a couple of directions given, the port number will be provided to you by 
expressworks as the first argument of the application, ie. process.argv[2]. We are also asked to please use 
process.argv[2] instead of a fixed port number. There is a lot of sample code given so that will be what we will use. 
The solution is this -

var express = require('express');
var app = express();
var portNum = process.argv[2];

app.get('/home', function(req, res) {
      res.end('Hello World!');
    });
app.listen(portNum);

As you can see there was not much to add to the sample code other than changing root to home and like in other sets 
of challenges I assign the port number to its own variable which is not really necessary.



Level 2  Static -
In this challenge we are asked to apply static middleware to serve an index.html file without any routes. The
solution must listen on the port number supplied by process.argv[2]. The index.html file is provided and usable via 
the path supplied by process.argv[3]. There are hints on how to do this and the solution should be straightforward
enough -

var express = require('express');
var portNum = process.argv[2];
var filePath = process.argv[3];
var app = express();

app.use(express.static(filePath || filePath.join(__dirname, 'public')));
app.listen(portNum);

This is my solution but there are others.



Level 3 Jade -
In this the third challenge we are asked to create an Express.js app with a home page rendered by Jade template 
engine. The homepage should respond to /home and the view should show the current date using toDateString. There is
a lot of sample code given and this should make the challenge easier to complete. The solution is

var express = require('express');
var portNum = process.argv[2];
var filePath = process.argv[3];
var app = express();
app.set('view engine', 'jade');
app.set('views', filePath || filePath.join(__dirname, 'public'));

app.get('/home', function(req, res) {
    res.render('index', {date: new Date().toDateString()});
});

app.listen(portNum);

As you can see there is a lot of previously used code along with the documentation hints.




Level 4 Good Old Form -
The goal of this challenge is to write a route ('/form') that processes HTML form input 
(<form><input name="str"/></form>) and prints backwards the str value. There are a lot of hints on how to do this
in the documentation as well as an explanation about using POST instead of GET. The solution is this 

var express = require('express');
var portNum = process.argv[2];
var bodyparser = require('body-parser');
var app = express();

app.use(bodyparser.urlencoded());

app.post('/form', function(req, res){
     res.send(req.body.str.split('').reverse().join(''));
});

app.listen(portNum);

It is fairly similar to previous code with the exception of the bodyparser module.



Level 5 Stylish CSS -
In this challenge we are asked to Style the html from the example "STATIC" using Stylus middleware. Also at the end
of the hints is the note that in addition to producing in the "STATIC" exercise, you'll need to serve static files.
Also you are cautioned to remember that middleware is executed in the order app.use is called. There are a lot of
hints and ideas and recommendations and all of these in addition to previous code should make the challenge a tiny
bit easier. The solution is identical to the static challenge which maybe a bug

var express = require("express");
var portNum = process.argv[2];
var filePath = process.argv[3];
var app = express();

app.use(express.static(filePath || filePath.join(__dirname, 'public')));

app.listen(portNum);

The official solution is 

var express = require('express')
var app = express()
    
app.use(require('stylus').middleware(process.argv[3]));
app.use(express.static(process.argv[3]));
    
app.listen(process.argv[2])




Level 6 Param Pam Pam -
In this challenge we are asked to create an Express.js server that processes PUT '/message/:id' requests and 
produces an SHA1 hash of the current date with the id. There are plenty of hints given and the code from previous
challenges will probably be able to be reused. With that in mind the solution should look like 

var express = require("express");
var path = require("path");
var portNum = process.argv[2];
var crypto = require("crypto");
var app = express();

app.put('/message/:id', function(req, res){
    var id = req.params.id;
    var hashedDate = crypto.createHash('sha1').update(new Date().toDateString() + id).digest('hex');
    res.send(hashedDate);
});

app.listen(portNum);

As you can see there is little that needed to be done as the hints and previous code all but completed the whole
challenge without needing to anything but read the documentation which in itself is an important point.




Level 7 What's In Query -
This is the penultimate challenge in expressworks and in it we are asked to write a route that extracts data from 
query string in the GET '/search' URL route, e.g. ?results=recent&include_tabs=true and then outputs it back to
the user in JSON format. There are only a couple of hints which we already know and there will be a lot of the
code above reused as has been standard practice. With all of that in mind the solution should be 

var express = require("express");
var portNum = process.argv[2];
var app = express();

app.get('/search', function(req, res){
    res.send(JSON.stringify(req.query));
});

app.listen(portNum);

There are some similar solutions but they would not pass (maybe a bug) so this is the cleanest one for me.



Level 8 - JSON Me
This is the final expressworks challenge and in it you are asked to write a server that, when it recieves a GET, 
reads a file, parses it to JSON and responds with that content to the user. The server should respond to any GET 
that matches the '/books' resource path. As always, the port is passed in process.argv[2]. The file to read is 
passed in process.argv[3]. Again there are hints and along with them and the requirements and previous code it
should get the challenge done without too much trouble.

var express = require("express");
var portNum = process.argv[2];
var filePath = process.argv[3];
var fs = require("fs");
var app = express();

app.get('/books', function(req, res){
    fs.readFile(filePath, function(err, data){
            res.json(JSON.parse(data));
            res.end();
    });
});

app.listen(portNum);

