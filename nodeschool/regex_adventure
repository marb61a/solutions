      These are my solutions to the Regex Adventure series of challenges

Level 1 Literally - 
This is the first of the challenges of the series and as usual it is very easy as usual -
For our first adventure, create a new file that will receive a string as an
argument and should return whether the string contains another string,
"LITERALLY".
There are also plenty of hints and boilerplate that can be used so the solution is fairly obvious -

module.exports = function(str){
   return /LITERALLY/.test(str);
};

Anything surrounded by the forward slashes is regarded as a regular expression.



Level 2 Anchor Start -
The second challenge is very similar to the first as the task is - 
This time your regex should match only when the given string begins with
"LITERALLY".
Again there is boilerplate code and there are also hints which give a pretty good guide to what is needed to
solve the challenge. The solution is -

module.exports = function(str){
   return /^LITERALLY/.test(str);
};



Level 3 Anchor End - 
Again the third challenge is a variation on a theme -
This time your regex should match only when the given string ends with
"BANANAS".
As is usual there is boilerplate and hints so the solution should be -

module.exports = function (str) {
   return /BANANAS$/.test(str);
};



Level 4 Character Class -
The task in this challenge is -
Write a module that returns true only when the input string starts with a
lower-case vowel or a digit.
Again this is a variation of the first challenges and the solution should be similar -

module.exports = function(str){
   return /^[aeiou0-9]/.test(str);
};




Level 5 Negated Character Class -
This time the task is -
Write a module that returns true only when:
  the first character is not a digit
  and the second character is not a capital letter.
There are also some valuable hints -
You won't need these right now, but there are some handy shortcuts for character
classes:

  * \d - [0-9]        any digit
  * \w - [A-Za-z_]    word character
  * \s - [ \t\r\n\f]  whitespace

Capitalize the shortcut escape characters to negate them:

  * \D - [^0-9]        not a digit
  * \W - [^A-Za-z_]    not a word character
  * \S - [^ \t\r\n\f]  not whitespace

There is a special character class `.` that matches any character, except for
newlines (under some conditions).
This is a case where the answer is similar to the previous except with negation so the solution should be

module.exports = function(str){
   return /[^0-9][^A-Z]/.test(str);
};




Level 6 Meta -
This is the sixth challenge and the task this time is -
Export a function that takes a string argument and returns whether the string
ends with a literal `.` (dot).

This is a bit different than the preceeding tasks but there are plenty of hints and boilerplate code so the solution
should be -

module.exports = function(str){
   return/\.$/.test(str);
};




Level 7 Quantifier -
In this the seventh challenge the task is -
Export a function that takes a filename string as an argument and returns
whether the entire filename is a sequence of one or more digits followed by
`.jpg` or `.jpeg`.

There is as always plenty of hints and boilerplate so the solution should be quick and look like this -

module.exports = function(str){
  return /\d+\.jpe?g$/.test(str); 
};




Level 8 Split -
The task to be completed on this level is -
Strings in javascript have a `.split()` method. `.split()` takes an argument
that can be a string or a regex.

Write a module that accepts a string as its argument and returns an array that
splits the string on commas separated by arbitrary amounts of whitespace.
This is similar to both previous challenges and also challenges from other series, the solution is

module.exports = function(str){
  return str.split(/\s*,\s*/);
};




Level 9 Capture -
This time the task involved is -
In this adventure, export a module that searches for the string `x=` followed by
numbers and returns the number found after the equal sign.
There is also a boilerplate template provided and plenty of hints inluding some useful info -
Instead of calling `.test()`, we can use `.exec()`, which returns a match
object. If the regex matched the string, the match object will be populated with
capture groups.

Capture groups are pieces of regex inside of `(` and `)`.
The text that matches inside the `(` and `)` will be captured and available on
the match object with square bracket indexes starting from 1 for the leftmost
group.

The solution will be -
module.exports = function(str){
   var m = /x=(\d+)/.exec(str);
   return m ? m[1] : null;
};




Level 10 Capture Breakword -
For the 10th level the task is -
Just like before, export a module that searches for `x=` followed by a number
and return the number found after the equal sign.

Unlike before, your solution should only match `x=` when there are no word
characters immediately before `x=` or immediately after the number to the right
of the equal sign.

Again there is boilerplate and also some useful hints -
You can use a special type of anchor, `\b` to match when there is a break in a
word.
With all of this the solution is -

module.exports = function(str){
  var m = /\bx=(\d+)\b/.exec(str);
  return m ? m[1] : null;
};




Level 11 Alteration -
In this the 11th challenge the task to be completed is -
Export a function that takes a string argument and returns whether the string
starts with `cat`, `dog`, or `robot` followed by a number to the end of the
string.

Again there is both boilerplate and hints such as
You can use the alteration operator `|` to solve this adventure.

The alteration operator matches among possible options:

  /xyz|qrs|tuv/.test('tuv') // true

Alteration operators are often seen in capture groups:

  /0x(ff|00|80)/.test('0x80') // true
  
All of this means that the solution will be -
module.exports = function(str){
   return /^(cat|dog|robot)\d+$/.test(str);
};




Level 12 Quantified Group -
This is the penultimate challenge and the task this time is -
Export a function that takes a string argument and returns whether the string
contains exactly 8 columns of hex codes formatted like: 0xFF with one or more
characters of trailing whitespace after each hex code to separate the columns.
Again there is boilerplate code and hints -
Quantifiers work equally well with capture groups as they do with characters and
character classes. There are more quantifiers aside from `+`, `*`, and `?`:

  {n,m}  must occur at least n times but no more than m times
  {n,}   must occur at least n times
  {n}    must occur exactly n times
All of the above means that the solution will be -

module.exports = function(str){
   return /^(0x[A-Fa-f\d]{2}\s+){8}$/.test(str); 
};




Level 13 Quotes -
Last challenge of the series and the task here is -
Write a module that accepts a string as its argument and returns an array of
the quoted strings contained in the input. Strings will be quoted with double
quotes. Your program should include the double quotes in its output.
As is standard in the series there is boilerplate code to use and hints like this -
You can use `str.match(regex)` to return an array string matches for `regex`
when the `regex` has `/g` flag enabled.
All of which means that the solution will be -

module.exports = function (str) {
  return str.match(/"[^"]*"/g); 
};
