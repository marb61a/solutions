                The scope-chains-closures series of challenges
  
Level 1 Scopes -
This level has a lot of notes on the various scopes available within javascript, the challenge itself is fairly
basic as the solution will show -

function foo (){
  var bar;  
};




Level 2 Scope Chains -
This is an extension of the previous level -
Modify your solution from lesson 1 so foo contains a function zip
which itself contains one variable lexically scoped called quux

The solution again is very easy -

function foo (){
    function zip(){
        var quux
    }
  var bar;  
};




Level 3 Global Scope and Shadowing - 
The third task is again an extension of the previous challenge -
Starting with your solution from the previous lesson, assign a value to quux
inside foo() (don't use var or let). The value should be different to the
value assigned when defining quux inside zip().
In spit of the lengthy discussion the solution is relatively straightforward - 

function foo (){
    quux = 0;
    function zip(){
        var quux
    }
  var bar;  
};




Level 4 Closures -
This is the 4th and penultimate challenge and the task this time is -
Modify your solution from the previous lesson to set bar = true inside zip(),
then return the function zip as the result of foo()
Again there is a lengthy discussion of how closures work which informs the solution which again is a continuation
of the previous challenge and looks like this -

function foo (){
    quux = 0;
    function zip(){
        var quux
        bar = true;
    }
    var bar; 
    return zip;
};




Level 5 Garbage Collection -
In this the final challenge of the series the task is -
In this challenge, you will be required to use Chrome DevTools for detecting
Garbage Collection events. Follow these steps to get a feel for what happens
when Chrome performs its Mark & Sweep algorithm:

1)  Fire up a new tab in Chrome
2)  Open the DevTools > Timeline tab
3)  Ensure the settings are like so: http://i.imgur.com/RMovIw4.png
  a) Frames View is unselected (allows seeing memory graphs)
  b) Flame Chart View is selected (allows seeing where execution time is spent)
  c) Only "Memory" is selected from the options
4)  Click the solid gray record button to begin capturing data
5)  Visit http://www.stackoverflow.com (or your favourite website)
6)  Click the now-red record button to stop capturing data
7)  You should now see something similar to: http://i.imgur.com/ZCNMrI1.png
8)  The part we're interested in is when memory suddenly drops:
    http://i.imgur.com/FyMyRVI.png
9)  Click this drop in memory to select it
10) Now look for the yellow event called "GC Event": http://i.imgur.com/3ieSxIZ.png
11) Clicking this event will reveal information about total memory garbage
    collected, and how long it took.

Again this is easy enough as there is no coding to do and running verify ends the series.
