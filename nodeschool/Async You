These are the solutions to the Nodeschool Async You set of challenges

Level 1 Waterfall -
This is the first challenge and according to the documentation there is a need to write a program that first reads the
contents of a file.The path will be provided as the first command-line argument to your program and the file will 
contain a single URL. Using http.get, create a GET request to this URL and console.log the response body. This is a 
relatively basic challenge to start as there is a lot of code given so here is the solution 

var http = require('http')
var async = require("async");
var fs = require("fs");
var filepath = process.argv[2];

async.waterfall([
    function(cb){
        fs.readFile(filepath, function(err, data){
            if(err){
                return cb(err);
            }else{
                cb(null, data.toString());
            }
        });
    },
    function(urlData, cb){
        var body = '';
        http.get(urlData, function(res){
                res.on('data', function(chunk){
                body += chunk.toString();
            });
                res.on('end', function(){
                cb(null, body);
            });
        }).on('error', function(err) {
          cb(err);
        });
        }
    ], 
    function(err, result){
      if (err) return console.error(err);
      console.log(result);
    }
    );

This has a lot of the boilerplate code that was given used with a little amount of changes as that was all the 
challenge needed.



Level 2 Series Object - 
In this challenge the site says that it is going to be async.series that will be the basis of the challenge and it
discusses the difference between this and the waterfall method used in the previous challenge. In the words of the
site itself regarding the task
Write a program that will receive two URLs as the first and second command-line arguments.
Using http.get, create a GET request to these URLs and pass the response body
to the callback.
Pass in an object of task functions, using the property names requestOne and
requestTwo, to async.series.
console.log the results in the callback for series when all the task functions
have completed.
Like the previous challenge there has been plenty of boilerplate code given with hints so the challenge should be
quick to solve. The solution should look like this

var http = require('http');
var async = require("async");
var firstpath = process.argv[2];
var secondpath = process.argv[3];

async.series({
    requestOne: function(cb){
        http.get(firstpath, function(res){
            var body = '';
            res.on('data', function (chunk) {
                        body += chunk.toString();
                    }).on('end', function () {
                        cb(null, body);
                    });
                }).on('error', function (err){
            return cb(err);
        });
    },
    requestTwo: function(cb){
        http.get(secondpath, function(res){
            var body = '';
            res.on('data', function (chunk) {
                        body += chunk.toString();
                    }).on('end', function () {
                        cb(null, body);
                    });
                }).on('error', function (err) {
            return cb(err);
        });
     }    
    },
    function(err, result){
      if (err) return console.error(err);
      console.log(result);
    }
);

As you can see the previous challenge gave a lot of code that could be reused and from there it was a matter of
changing only a few things using the hints and documentation. The official solution is also well worth a look

var http = require('http')
      , async = require('async');
    
    async.series({
      requestOne: function(done){
        fetchURL(process.argv[2], done);
      },
      requestTwo: function(done){
        fetchURL(process.argv[3], done);
      }
    },
    function(err, result){
      if (err) return console.error(err);
      console.log(result);
    });
    
    function fetchURL(url, done) {
      var body = '';
      http.get(url, function(res){
        res.on('data', function(chunk){
          body += chunk.toString();
        });
    
        res.on('end', function(chunk){
          done(null, body);
        });
      }).on('error', function(e){
        done(e);
      });
    }

They have chosen to do things slightly different by defining a seperate function and then calling it in the series.



Level 3 Each -
In this the third level the challenge is to use async.each. The task itself is this -
Create a program that will receive two URLs as the first and second command-line
arguments.
Then using http.get, create two GET requests to these URLs and console.log
any errors
As usual there is a lot of boilerplate code and hints and this along with experience and code from the previous
examples should provide a solution. This should look like

var http = require('http');
var async = require("async");
var firstUrl = process.argv[2];
var secondUrl = process.argv[3];

async.each([firstUrl, secondUrl], function(item, done){
    http.get(item, function(res){
        res.on('data', function(chunk){
            
        });
        res.on('end', function() {
            done();
        });
        }).on('error', function (err) {
            done(err);
        });
        }, function(err){
            if (err)
            console.log(err);
});

Again there is not that much difference between the official solution and this probably from using the hints
and the boilerplate code.



Level 4 Map -
In this challenge the task according to the site is to -
Write a program that will receive two command-line arguments to two URLs.
Using http.get create two GET requests to these URLs.
You will need to use async.map, then console.log the results array.
This is fairly similar to challenges from other sets so using them should provide a quick solution.

var http = require('http');
var async = require("async");
var input = process.argv.slice(2);

async.map(input, function(item, done){ 
    http.get(item, function(res){
        var result = "";
        res.on('data', function (chunk) {
            result += chunk.toString();
        });
        res.on('end', function () {
        return done(null, result);
        });
    });
},function(err, result){
      if (err) return console.error(err);
      console.log(result);
    }
);

As can be seen it was just a matter of reusing a lot of previous examples code and slightly adjusting the input
parameters.




Level 5 Times -
The goal of this challenge according to the site is to 
Write a program that will receive two command line arguments containing
the hostname and port. Using http.request send a POST request to

    url + '/users/create'

with the body containing a JSON.stringify'ed object:

    {"user_id": 1}

Do this five times with each time the user_id property being incremented,
starting at 1.
Once these requests are done, send a GET request to:

    url + '/users'

and console.log the response body for the GET request.
There are a few different parts to this challenge and the hints as well as previous challenges code are going to
be used to help as async.series is needed. Also I will need to do a fair amount of reading as async.series is still
not that familiar. The solution is this

var http = require('http');
var async = require("async");
var hostName = process.argv[2];
var portNum = process.argv[3];
var  url = 'http://' +  hostName + ':' + portNum;

async.series({
  post: function (done) {
          
    var options = {
      hostname: hostName,
      port: portNum,
      method: 'POST',
      path: '/users/create'
    };

    async.times(5, function (n, next) {
      var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
        });

        res.on('end', function () {
          next(null);
        });
      }).on('error', function (err) {
        return console.error(err);
      });

      var data = JSON.stringify({ user_id : n + 1 });
      req.write(data);
      req.end();
    }, function (err) {
      if (err) {
        return console.error(err);
      }
      done(null);
    });

 }, 
    
    get : function(done){
    http.get(url + '/users', function(res){
       var body = '';

     res.on('data', function (chunk) {
       body += chunk.toString();
     });

     res.on('end', function () {
       done(null, body);
     });
     });
     }
    }, function (err, results) {
      if (err) {
        return console.error(err);
      }
      console.log(results.get);
    });
    
There are a few different ways of solving the challenge but all seem to be variations on a theme, I did need some
assistance on this challenge as I was having issues.



Level 6 Reduce -
This is the penultimate challenge in the series and according to the site documentation the task is this
Write a program that will receive an URL as the first command line argument.

To this URL, for each of the values in the following array, send a GET request
using http.get with a query parameter named number set at the proper value:

    ['one', 'two', 'three']

Each time, convert the response body to Number and add it to the previous value.
console.log the final reduced value.
There are several hints offered and there also seems to be a lot of code that has been used in previous challenges
that can be reused in this one. This also has a lot of similarities to the reduce exercise from the functional
javascript set of challenges which also offers some help in solving the challenge. The solution should be this

var http = require('http');
var async = require("async");
var urlPath = process.argv[2];

async.reduce(['one', 'two', 'three'], 0, function(memo, item, callback){
     var body = '';
     
     http.get(urlPath + "?number=" + item, function(res){
         
         res.on('data', function (chunk) {
           body += chunk.toString();
         });
    
         res.on('end', function () {
           callback(null, memo + Number(body));
         });
         });
        }, function (err, result) {
              if (err) {
                return console.error(err);
              }
              console.log(result);
        });

Oddly enough this is the same as the official solution, there are a few different ways of doing this I also used
parseFloat() and parseInt() instead of Number(), parseInt must get an additional input which defines the radix used
as it needs to be explicit.



Level 7 Whilst -
This is the seventh and final challenge in AsyncYou and according to the documentation the task is to
Write a program that will receive a single command line argument to a URL.

Using async.whilst and http.get, send GET requests to this URL until
the response body contains the string "meerkat".

console.log the amount of GET requests needed to retrieve the "meerkat" string.
There are hints provided and it would be wise to expect to use a lot of previous code as all challenges have made
use of this structure. The solution should therefore look something like this -
