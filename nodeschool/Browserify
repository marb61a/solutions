These are my solutions to the Nodeschool Browserify series of challenges

Level 1  BEEP BOOP - 
The first task as is standard across all of the nodeschool series of challenges is a simple one in this case it is
simply to print BEEP BOOP to the console using console.log().

console.log('BEEP BOOP');



Level 2 Using NPM Packages -
This second task is also fairly basic as the documentation asks that 
For this level, use `prompt()` to fetch a string. Split the string that
`prompt()` returns by commas (`str.split(',')` returns a separated array of
strings) and run this array through `uniq()` to discard repeated items.
Use `console.log()` to print the resulting uniq array.
The solution is - 
var uniq = require("uniq");
var str = prompt();

console.log(uniq(str.split(',')));



Level 3 Single Exports -
In the third challenge of the series the task is similar to a challenge from another set as the task involves
refactoring the pervious challenge in to 2 file. The documentaion provides a better description -
First, create a file called `uniquely.js`. In this file, assign a function
to `module.exports` that takes a comma-separated string as input and
returns a uniq list as output. Use the `uniq` module like from the "using
npm packages" level.

Now in your entry file (the file that you pass to the browserify command),
use `require()` with a relative path string to your `'./uniquely.js'`
file.

When you `require()` the `uniquely.js` file, `require()` will return
whatever value you set `module.exports` to in `uniquely.js`. Call the
exported function with the value from `prompt()` as an argument and print
the return value with `console.log()`.
The description is probably longer than the solution which is here

Single Exports file -
var uniquelyFile = require("./uniquely.js");

var result = uniquelyFile(prompt());
console.log(result);;

Uniquely.js file -
var uniq = require('uniq');

module.exports = function(str){
    return uniq(str.split(','));
};

As can been seen the solution is indeed fairly self-explanatory.


Level 4 Multi Export -
This is the 4th level of browserify and it is fairly similar to challenges from other sets, the details of the
task itself in the documentations words is -
For this level, call `prompt()` twice from your entry file to obtain 2
values: the first is a string you should parse into an array of objects and
the second value is an array you should serialize back into a string. Print
each return value with `console.log()`.

In a second file `./ndjson.js`, export a `parse()` and `stringify()`
function by assigning properties onto the `exports` object.
As can be seen from the description a lot of what is asked is similar to other challenges so both ideas and code 
can be used in the solution which is here -
The main file code is :

var jsonFile = require('./ndjson');
var firstVal = prompt('String : ');
var secondVal = prompt('Array : ');

console.log(jsonFile.parse(firstVal));
console.log(jsonFile.stringify(secondVal));

ndjson.js code is here :

exports.parse = function(str){
    return str.split('\n').map(JSON.parse);
};

exports.stringify = function(rows){
    return rows.map(JSON.stringify).join('\n');
};



Level 5 Builtins -
The challenge this time according to the documentation is -
For this level, `prompt()` will return a web address.
Parse the address's query string and print the "file" parameter from the
query string relative to the rest of the web address.
The solution should be quick enough to find as the challenge documentation advises to uses inbuilt functionality.
The solution should therefore look like this -

var url = require("url");
var qString = require("querystring");
var webAddr = prompt();
var addrQuery = url.parse(webAddr).query;
var addrParams = qString.parse(addrQuery);


console.log(url.resolve(webAddr, addrParams.file));

The solution is easy enough after reading through the challenge hints.




Level 6 Build a Widget -
In this challenge the task will be to -
You should implement the widget module that will be loaded with
`require('widget')`. Your widget module should create an html element from
the html string:

  <div>Hello <span class="name"></span>!</div>
  
Your widget module will need to implement `w.setName(str)` and
`w.appendTo(target)`. `w.setName(str)` will need to update the "name"
span's inner context with `str`. You can set the span element's
`.textContent` once you have a handle on the span which you can obtain with
`elem.querySelector('css selector goes here')`.

You will also need to implement `w.appendTo(target)`, which appends the
widget's internal html element to `target`. You can use
`target.appendChild(elem)` to append the widget's element to the target.

As can be seen there is a lot of things that need to be done to complete the challenge but there are a lot of 
hints and a lot of requirements which should go a long way to completing the challenge. The solution with all of
this in mind should be this -

var domify = require("domify");
var Widget = require('widget');
var name = '';

var widgetFunction = function(){
    function htmlElement(){
        return '<div>Hello <span class="name">' + name + '</span>!</div>';
    }
    
    return{
    setName : function(newName){
        name = newName;
    },
    
    appendTo: function (el) {
      return el.appendChild(domify(htmlElement()));
    }
    };
};

module.exports = widgetFunction;

This function is working the same as verified others but I am not getting the success message.

  

Level 7 - Using Transforms
This is the seventh challenge in the series and this time around the task is - 

For this problem, we will use a browserify transform to load a text file
and then we will apply some processing to the text file. Browserify
transforms are used to pre-process input source files into something that
browserify can read. For example, there are transforms for coffeescript
(coffeeify), es6 syntax (es6ify), and more on npm!

The text file you should read into your file is located at:
/home/ubuntu/.nvm/v0.10.35/lib/node_modules/browserify-adventure/problems/using_transforms/wake.txt

Use `brfs` to read that text file and print out the text file with leading
line numbers every 5th line with line numbers starting at 0, inclusive of 0.

You should pad the line number to 3 characters followed by a single space,
followed by the original line contents. For lines without printed line
numbers, print 4 spaces followed by the original line contents.

After the fairly lengthy task discussion there are a lot of tips and hints on using different modules which may
make things easier so the solution should look like this -

var fs = require('fs');
var sprintf = require("sprintf");
var src = fs.readFileSync('wake.txt', 'utf8');
var textlines = src.split('\n');

textlines.forEach(
    function(line, i){
        if(i % 5 === 0){
            console.log(sprintf("%3d %s", i, line));
        }else{
            console.log(sprintf("    %s", line));
        }
    }
);

Again due to some issues I have had trouble verifying this solution but I tested other solutions that have been
verified and was getiing the same errors.



Level 8 Writing Transforms -
This is the 8th of 10 challenges and it bears more than a passing resemblence to a challenge from the learnyounode
series. In this challenge the task is to -
Building upon the previous "using transforms" second, write a custom
browserify transform so that in main.js you can simply do:

var txt = require
        ('/home/ubuntu/.nvm/v0.10.35/lib/node_modules/browserify-adventure/problems/writing_transforms/wake.txt');
console.log(txt);

and the `txt` output will be formatted with the proper line-numbering as
from the previous level: printf("%3d %s", lineNum, line) every 5th line
line numbers starting from zero and four leading spaces on the other
lines.

Again there is a fairly lengthy discussion and a referal to the stream adventure set of challenges. The solution
will have a couple of different parts, the main js file and also the tr.js file.
The files will look like this -
