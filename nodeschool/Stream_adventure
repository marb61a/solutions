These are my solutions to Nodeschool Stream Adventure

Level 01  Beep Boop -
This is a simple challenge to get started, write a program the outpus beep boop to the console
console.log('beep boop');



Level 02  Meet Pipe -
var fs = require("fs");
var fileNeeded = process.argv[2];

fs.createReadStream(fileNeeded).pipe(process.stdout);

There are various combinations of the above for solving the problem but this is mine.



Level 03 Input Output -
The challenge is to take data from `process.stdin` and pipe it to `process.stdout`. The documentation
also warns against overthinking the problem. The solution itself is fairly easy

process.stdin.pipe(process.stdout);



Level 04 Transform -
This time the challenge is to create a through stream with a `write` and `end` function. As with all of these
challenges each level builds on the previous and usually combining this with the hints get you close to solving the
challenge, with this in mind the solution is

var through = require("through");
var transformStream = through (function(buffer){
    this.queue(buffer.toString().toUpperCase());
});    

process.stdin.pipe(transformStream).pipe(process.stdout);

One note is that the official solution has through2 as a variable but for some reason that solution does not work 
for me ????




Level 05 Lines -
In the fifth challenge we are asked to write a solution to a challenge which is identical to the previous one but
with one important twist which is to convert even-numbered lines to upper-case and odd-numbered lines to lower-case.
We may also consider the first line to be odd-numbered. We also have to install split through2 to the directory. As
this is similar to the previous challeng we should be able to use a lot of the code and the documentation gives a
good hint as to where to proceed from, my solution is this

var through = require("through");
var split = require('split');
var newlines = 1;

var transformStream = through(function write(buffer){
    this.queue(buffer.toString()[
        newlines++ % 2 === 0? 'toUpperCase' : 'toLowerCase'
        ]() + '\n');
});
process.stdin.pipe(split()).pipe(transformStream).pipe(process.stdout);

As you can see I made use of the previous challenges code and also the hints, I was torn about using if else or a
ternary statement in combination with the modulus either one will do as will other methods.



Level 06 Concat -
At first glance this exercise appears to be the same as one from the learnyounode challenges but in this you must
use concat-stream rather than the choice of concat stream or bl. The challenge is described by the documents as this,
you will be given text on process.stdin, you will have to buffer the text and reverse it using the `concat-stream` 
module before writing it to stdout. As I have done similar before there is a lot of code I can reuse along with the
boilerplate hints provided. This is my solution

var concat = require('concat-stream');

process.stdin.pipe(concat(function(body){
    process.stdout.write(body.toString().split('').reverse().join(''));
}));

Again as you can see a lot of stuff is the same as other solutions, in the body the string is split, reversed and
then it is rejoined. These are all functions that are available in javascript.



Level 07 HTTP Server - 
In this level we are told that the challenge is to write an http server that uses a through stream to write back 
the request stream as upper-cased response data for POST requests. This builds upon previous exercises and compares 
to other nodeschool sections. Again we will make use of what we have written previously and also the hints given. 
The solution should be like this 

var http = require("http");
var through = require("through");
var portNum = process.argv[2];
var fs = require("fs");

var to_uppercase = function(buffer){
    this.queue(buffer.toString().toUpperCase());
};

var server = http.createServer(function (req, res) {
        if (req.method === 'POST') {
            req.pipe(through(to_uppercase)).pipe(res);
        }
       
    });

server.listen(portNum);

As you can see this is a combination of previous code and code from both the hints and other nodeschool sections.




Level 08 HTTP Client -
In this challenge we are asked to send an HTTP POST request to http://localhost:8099 and pipe process.stdin into
it.and then pipe the response stream to process.stdout. There are several hints on how to approach this problem
and there is also some code samples which can be used to do the challenge. There are a few different solutions
but this is mine

var request = require("request");
var reqPost = request.post('http://localhost:8099');

process.stdin.pipe(reqPost).pipe(process.stdout);

As you can see it is very similar to previous code.




Level 09 Websockets -
In this the ninth challenge we are simply asked to  write some browser code that uses the websocket-stream module
to print the string "hello\n". The solution is

var ws = require('websocket-stream');
var stream = ws('ws://localhost:8099');

stream.write('hello\n');

This is the same as the official solution but there are more ways to do this such as stream.end.



Level 10 HTML Stream -
In this challenge you are asked to get some html written to stdin. Convert all the inner html to upper-case for 
elements with a class name of "loud", and pipe all the html to stdout. For this challenge you are also told to 
install trumpet and there is some sample code given which along with some code from above examples should prove
useful. This is my solution

var trumpet = require('trumpet');
var through = require("through");
var tr = trumpet();
var loud = tr.createStream('.loud');

var to_uppercase = function(buffer){
    this.queue(buffer.toString().toUpperCase());
};

loud.pipe(through(to_uppercase)).pipe(loud);
process.stdin.pipe(tr).pipe(process.stdout);

As you can see I have reused a lot of previously written code, this along with the requirements and hints meant the
challenge was just about done.




Level 11 Duplexer -
In this challenge we are asked to write a program that exports a function that spawns a process from a `cmd`
string and an `args` array and returns a single duplex stream joining together the stdin and stdout of the spawned
process. We are asked to install duplexer because according to the documentation the duplexer module exports a 
single function `duplexer(writable, readable)` that joins together a writable stream and readable stream into a 
single, readable/writable duplex stream. Taking pevious code and the hints and experience from other challenges the
solution should be 

var duplexer = require("duplexer");
var spawn = require('child_process').spawn;

module.exports = function(cmd, args){
    var spawnedProcess = spawn(cmd, args);
    return duplexer(spawnedProcess.stdin, spawnedProcess.stdout);
};

As is obvious there is not much that needs to be done but you can just setup the function and then export irt on a
seperate line but this is cleaner.




Level 12 Duplexer Redux - 
This challange begins by telling you that you will be given a readable stream, `counter`, as the first argument to 
an exported function where you will return a duplex stream with the `counter` as the readable side. You will be
written objects with a 2-character `country` field as input, you are the asked to create an object to track the 
number of occurrences of each unique country code, once the input ends, call `counter.setCounts()` with your counts 
object. This is fairly similar to the previous challenge which is above and it is from there that the solution will
be gotten. 

var duplexer = require("duplexer");
var through = require("through");

module.exports = function(counter){
    var counts = {};
    var input = through(function write (buffer){
        counts[buffer.country] =  counts[buffer.country] ?  counts[buffer.country] + 1 : 1;
    }, function end (done){
        counter.setCounts(counts);
        done();
    });
    return duplexer(input, counter);
};

This is about the easiest solution, as you can see if you look up through previous solutions you will see that
I have reused code from previous challenges, this along with the requirements and the demand made by the 
challenges about using the setCounts() at the end meant that there was not much to do other than the iteration
through the countries, this is a ternary solution but any loop should do the same thing.
