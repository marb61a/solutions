These are my solutions to the Nodeschool Make Me Hapi series of challenges. Hapi is a framework for Node and it is
like Express in that both are Http frameworks.

Level 1 - Hello Hapi
This is the first challeng in the makemehapi set and according to the sitewe must create a hapi server that listens 
on a port passed from the command line and replies with "Hello Hapi" when an HTTP GET request is sent to /. There is 
a large amount of hints and boilerplate code so the solution should be relatively straight forward

var Hapi = require('hapi');
var server = new Hapi.Server();
var portNum = process.argv[2];

server.connection({host: 'localhost', port: Number(portNum || 8080)});

server.route({
                path : '/', 
                method:'GET',
                handler: function(req, reply)
                        {
                            reply('Hello Hapi');
                            
                        }});
                        
server.start();

There were some issues with my cloud ide as I had not installed hapi so that is important as is the need to make 
sure that the localhost address is correct as it may need to be changed depending on the ide. 



Level 2 ROUTES -
In this challenge the task is to create a hapi server that listens on a port passed from the command line and 
outputs "Hello [name]" where [name] is replaced with the path parameter supplied to GET /{name}. The previous code
along with the hints should give a good guide towards a solution. 

var Hapi = require('hapi');
var server = new Hapi.Server();
var portNum = process.argv[2];

server.connection({host: 'localhost', port: Number(portNum || 8080)});

server.route({
                method : 'GET',
                path : '/{name}',
                handler : function(req, reply){
                    reply('Hello ' + req.params.name);
                }
            });

server.start();

As can be seen there was not much to do using the previous code other than to change the handler method values.



Level 3 Handling -
The third challenge in this set asks for a server to be created which responds to requests to / with a static HTML 
file named index.html containing the following:

    <html>
        <head><title>Hello Handling</title></head>
        <body>
            Hello Handling
        </body>
    </html>

This should be fairly similar to the previous challenges so that meant that the previously written code can again
be reused. The solution then should look like this

var Hapi = require('hapi');
var path = require("path");
var server = new Hapi.Server();
var portNum = process.argv[2];


server.connection({host: 'localhost', port: Number(portNum || 8080)});

server.route({
                method : 'GET',
                path : '/',
                handler : {
                    file: path.join(__dirname,'public/index.html')
                }
            });

server.start();

Again there are questions over some bugs in this set of challenges so it may not be the ide but this is the
correct solution, one note to remember is that the dirname has 2 underscores in front of it not 1.



Level 4 Directories -
This is the 4 challenge in makemehapi and in it the task is to -
Create a server which routes requests to the path /foo/bar/baz/file.html to a
file in a directory, e.g. public/file.html, which contains the following:

    <html>
        <head><title>Hello Directories</title></head>
        <body>
            Hello Directories
        </body>
    </html>
There are a lot of hints and boilerplate and the comibination of these and reusing code from previous examples 
should provide a great deal towards a solution which should look like this 

var Hapi = require('hapi');
var path = require("path");
var server = new Hapi.Server();
var portNum = process.argv[2];

server.connection({host: 'localhost', port: Number(portNum || 8080)});

server.route({
                path : '/foo/bar/baz/{filename}',
                method : 'GET',
                handler : {
                    directory:{ path: path.join(__dirname,'/public')}
                }
            });

server.start();  

Again due to an ide bug this was not passing but again I tried verified passing solutions and they failed too so
there seems to be a bug in the set of challenges as others are not having an issue.
