This is part 3 of my solutions to the Basic Algorithm Scripting bonfires on freecodecamp

Seek and Destroy - 
The challenge here according to the site is the following -
You will be provided with an initial array (the first argument in the destroyer function), followed by one or more 
arguments. Remove all elements from the initial array that are of the same value as these arguments.
The solution itself is relatively simple but like always there are multiple ways to do the same thing

function destroyer(arr) {
  
  var args = [].slice.call(arguments, 0);
  var array = [];
  var secondArray = args.shift();
  
  secondArray.forEach(function(val){
    if(args.indexOf(val) < 0){
      array.push(val);
    }
  });
  
  return array;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

I have looked at some other solutions that involve filter but as I am more familiar with the simpler methods I will
stick with them.




Where do I belong - 
According to the site the goal of this challenge is - 
Return the lowest index at which a value (second argument) should be inserted into a sorted array (first argument).
The solution itself is fairly basic as it just involves sorting the array and then using a for loop to loop through
the array and an if statement to compare values before returning, here is the code
function where(arr, num) {
  arr = arr.sort();
  
  for(var i = 0; i < arr.length; i++){
    if(arr[i] >= num)
      {
        return i;
      }
  }
  
  return i;
}

where([40, 60], 50);



Search and Replace -
The challange this time according to the site is -
Perform a search and replace on the sentence using the arguments provided and return the new sentence.

First argument is the sentence to perform the search and replace on.

Second argument is the word that you will be replacing (before).

Third argument is what you will be replacing the second argument with (after).

NOTE: Preserve the case of the original word when you are replacing it. For example if you mean to replace the word
'Book' with the word 'dog', it should be replaced as 'Dog'

The solution that I have put together is -

function replace(str, before, after) {
  var newBefore = before.split('')[0];
  var newAfter;
  
  if(newBefore.charAt(0) === newBefore.charAt(0).toUpperCase()){
    newAfter = after.split('')[0].toUpperCase();
    after = after.split('');
    after[0] = newAfter;
    after = after.join('');
  }
  
 str = str.replace(before, after);
  
 return str;
}

replace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");

Essentially you you are splitting the before and the after then performing checks for equality after you will 
replace the before with the after.



Convert HTML Entities -
The challenge according to the freecodecamp site is to -
Convert the characters "&", "<", ">", '"' (double quote), and "'" (apostrophe), in a string to their corresponding
HTML entities. Not sure if it is a site bug but order is important in this challenge

function convert(str) {
  var newstr = str.replace( /&/g, '&amp;' )
                  .replace( /</g, '&lt;' )
                  .replace( />/g, '&gt;' )
                  .replace( /"/g, '&quot;' )
                  .replace( /'/g, '&apos;' );
  
  return newstr;
}

convert('Dolce & Gabbana');



Finders Keepers -
Create a function that looks through an array (first argument) and returns the first element in the array that 
passes a truth test (second argument). The site suggests using array.some but there is a quicker method that is
available using array.shift(), there is a great example at this link

http://www.w3schools.com/jsref/jsref_shift.asp

As you can see using this will save a lot of trouble which means that the challenge can be solved by adding just 
one line to the boilerplate code like this

function find(arr, func) {
  var num = 0;
  num = arr.filter(func).shift();
  return num;
}

find([1, 2, 3, 4], function(num){ return num % 2 === 0; });



Missing Letters -
Find the missing letter in the passed letter range and return it.
If all letters are present in the range, return undefined.

There are a number of different solutions available but simplicity works best so this is mine -
function fearNotLetter(str) {
  for(var i = 0; i < str.length -1 ; i++){
    
    if((str.charCodeAt([i+1]) - str.charCodeAt ([i])) != 1){
        return String.fromCharCode(str.charCodeAt([i]) + 1);
      }
     
  }
                                
   return undefined; 
}

fearNotLetter('abce');




Pig Latin - 
The task in this challenge is to -
Translate the provided string to pig latin.

Pig Latin takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and 
suffixes an "ay".

If a word begins with a vowel you just add "way" to the end.

There is a bug with the challenge on the site as it is not giving the complete message even though all tests 
have been passed, this has meant that I lost my solution even though it passed but here is another verified
solution -

function translate(str) {
  var vowArr=['a','e','o','u','i'], charArr=[], conStr='';
  if (vowArr.indexOf(str.charAt(0))!=-1)
    return str+'way';
  else{
  charArr=str.split('');
  for (var i=0;i<charArr.length;i++){
    if (vowArr.indexOf(charArr[i])==-1)
    conStr+=charArr[i];
    else return charArr.slice(conStr.length).join('')+conStr+'ay';
  }
  }
}

translate("glove");


Boo Who - 
Check if a value is classified as a boolean primitive. Return true or false.

Boolean primitives are true and false.

There is a very simple solution to this task as Javascript has an operator called typeof which tells what type
a primitive value is so the solution is very quick -

return typeof bool === 'boolean';

This is probably not the solution that was envisaged as it is a little bit of a hack but it works there is a good
explanation of the typeof operator at -
http://www.javascriptkit.com/javatutors/determinevar2.shtml




Everything be true  -
Check if the predicate (second argument) returns truthy (defined) for all elements of a collection (first argument).
For this, check to see if the property defined in the second argument is present on every element of the collection.
Remember, you can access object properties through either dot notation or [] notation. The solution in this case is

function every(collection, pre) {
  // Create cycling counter
  var num = 0;
  
  // Check objects, if they have same property or property value increment by 1
  for(var i in collection){
    if(collection[i].hasOwnProperty(pre) || collection[i][pre] == pre){
      num++;
    }
  }
  
  // Ensure all true have been got
  if(num == collection.length){
    return true;
  } else{
    return false;
  }   
  
  return pre;
}

every([{'user': 'Tinky-Winky', 'sex': 'male'}, {'user': 'Dipsy', 'sex': 'male'}, 
{'user': 'Laa-Laa', 'sex': 'female'}, {'user': 'Po', 'sex': 'female'}], 'sex');

As can been seen the comments explain the method, bascially setup a counter to help cycle through the collection,
check the objects in the collection for matching property or property value and if so increment by 1. Finally then
check that all of the collection has been cycled through and return.

