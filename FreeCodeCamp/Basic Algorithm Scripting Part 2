This is Part 2 of my solutions to the FreeCodeCamp challenges. Like before these are not in the order they appear on
the site.



Roman Numeral Converter - I had to look up how to set up the numerals\numbers needed  online and although there are 
variations on a theme most revolve around the same solution

function convert(num) {
 var conversionSet = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1};
 var romanNumerals = '';
 var i;
  
 for(i in conversionSet){
   while( num >= conversionSet[i]){
     romanNumerals += i;
     num -= conversionSet[i];
   }
 } 
 return romanNumerals;
}

convert(36);

The solutions I came across all had similar methods as above. Basically you can do it like this or have a list or
dictionary with keys and values. Then there needs to be a couple of loops one to check the entered number against the
list of values. The second loop will run the number through conversion, it will be easier to demonstrate.
    36 is entered
    40 is too big so 10 is chosen
    10 is subtracted so it is now 26 which means that this needs to be repeated twice more
    6 is then left and 5 is subtracted
    1 is left
    Because the romanNumeral variable was empty it has the values from the conversionSet added, this is then
    sent to the screen and should be XXXVI
As I said previously there are many solutions available and the freecodecamp site suggests using various array
methods but of all the possible solutions I read and tried this one made the most sense to me and full credit goes
to the guys whose solutions helped me with this.




Falsey Bouncer -
The object of this challenge is to remover all the falsey values from an array. There are several methods that are
available but this one is the simplest -

function bouncer(arr) {
  var secondArray = [];
  for(var i = 0; i < arr.length; i++){
    if(arr[i]){
      secondArray.push(arr[i]);
    }
  }
  return secondArray;
}

bouncer([7, 'ate', '', false, 9]);

As you can see the soulution is to simply use an empty second array and populate it with values from the first after
cycling through it. There are solutions available which include array.filter and also array.splice which will
apparently perform faster but this is sufficient for the purposes which we need it for.



Truncate a String -
The challenge here is to test to see if the length of a string is greater than a num which is passed in as the
second parameter. If it is longer then it must be truncated and have 3 dots at the end, the three dots at the end 
add to the string length. the solution is fairly obvious -

function truncate(str, num) {
  if(str.length > num ){
    str = str.slice(0, num - 3) + "...";
  }
  
  return str;
}

truncate('A-tisket a-tasket A green and yellow basket', 11);

The solution does not need any explaining although I did try using a new string variable but it was better to just
use the existing string and change the value it points to.




Chunky Monkey - 
The goal in this challenge is to write a function that splits an array (first argument) into groups the length of 
size (second argument) and returns them as a multidimensional array. this one should be fairly easy 

function chunk(arr, size){
  var secondArray = [];
  
  for(var i = 0; i < arr.length; i += size){
    secondArray.push(arr.slice(i, i + size));
  }
  
  return secondArray;
}

chunk(['a', 'b', 'c', 'd'], 2);

This worked although the site crashed twice so I spent a while to make sure it was not this code.


Mutations - 
The goal of this challenge is to in the words of the site itself return true if the string in the first element of 
the array contains all of the letters of the string in the second element of the array.

function mutation(array) {
  var firstElement = array[0].toLowerCase();
  var secondElement = array[1].toLowerCase().split("");
  
  for(var i = 0; i < array[1].length; i++){
    if(firstElement.indexOf(secondElement[i]) === -1 ){
      return false;
    }          
  }  
  return true;
}

mutation(['hello', 'hey']);

I had huge problems with this and it was down to the fact that I had one failure due to the position of the true
return as I had it inside the for loop.



Where Art Thou -
The task here is to make a function that looks through a list (first argument) and returns an array of all objects 
that have equivalent property values (second argument) 

function where(collection, source) {
  var arr = [];
  // What's in a name?
  for(var i in collection){
    if(collection[i].last === source.last ){
      arr.push(collection[i]);
    }
  }
  return arr;
}

where([{ first: 'Romeo', last: 'Montague' }, { first: 'Mercutio', last: null }, 
{ first: 'Tybalt', last: 'Capulet' }], { last: 'Capulet' });


This was relatively quick, there are other solutions that make use of the api recommended by the site but this is 
simpler as it is just 2 loops and using the array.last method.
