These are the solutions for the OverTheWire Leviathan Wargame.

Level 0 - This involves just using the user name and password in order to ssh connect to the overthewire labs



Level 0-1 - The first challenge involves finding a password. As on other challenges it does well to remember that
finetuning commands gives better visibility on what is around. With this in mind the solution is

ls -la - This shows a hidden directory (hidden entities have a dot in front of them) called .backup,
cd .backup - going into the directory  
ls -la - shows that there is a file called bookmarks.html
cat bookmarks.html | grep password - will search the file for the password.




Level 1-2 - In this challenge there is a file named check, when you run a password that is wrong against the file it 
exits. As there is little or no information other than this, there will have to be some tests run against the file, 
there is a good guide to the debugging tools available on linux at

http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/

The solution will need to be explained step by step
Running ltrace ./check will trace the calls to the library function, this is a very well used linux tool and the main
reason that it is needed in this instance is that the password is stored within the file which means that We need to 
trace the.
The result of the ltrace gives some interesting results not least the fact that strcmp is running comparing the 
password entered to the word sex.
This means that running the file again using ./check and entering the word sex will give a shell.
Running the whoami command to see who you are gives leviathan2
Finally running cat against the file /etc/leviathan_pass/leviathan2 will give the password



Level 2-3 - In this challenge we are given one file when we run ls -la called printfile. The file itself belongs to 
the user leviathan3 and group leviathan2. There are a couple of ways that this problem can be tackled the easiest
is by using sym links. This is the solution step by step - 

./printfile - This command runs the file and it tells you that it wants a file path argument.

The next part will have to be explained in detail

- mkdir tmp/solution will make a directory for the solution
- touch /tmp/solution/file\ tmp.txt will make a file and the reason for the gap will be apparent
- cd tmp/solution which will move us to the directory holding the file needed for the sym link
- ls -la will show the file with the space
- ltrace ~/printfile file tmp.txt which like in the above challenge will trace the calls made. There are a few 
interesting calls made like snprintf which is essentially a function that redirects the output of printf to a buffer
it is similar to sprintf but a lot of the 'n' functions are safer and less susceptible to buffer overflows Its not
this that grabs the attention though its the calls to  cat and access. What is occuring is a small security hole in 
how this program operates. The function access() and /bin/cat are being called on the file, what access() does is 
check permissions based on the process’ real user ID rather than the effective user ID. While access does use the 
full file path, the cat being performed on the file is not using the full file path this can be seen near the end of
the output where /bin/cat/ is being called to tmp.txt as if it were a separate file, it’s really the second half of 
the filename we created. This can be exploited if we create a symbolic link from the password file to the file we 
created in the /tmp directory.

- ln -s /etc/leviathan_pass/leviathan3 /tmp/solution/file - this will create a sym link but not to the file that we 
have created.
- ls -la will show a new file created called file
- ~/printfile "file tmp.txt" will call printfile on the created file rather that the file generated by the sym and
will show the pass.

This challenge was very tricky and I had to get help as I spent hours looking through the manuals so a big thanks
to the guys who solved this and helped me. The final thought is about the space in the name of the file created it
is a syntax hack needed to make the solution work. Also as I said maybe a way of not using symlinks try this url
http://perso.heavyberry.com/writeups/leviathan.html.


