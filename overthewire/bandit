Bandit Solutions

Level 0 -
Simply ssh to bandit0@bandit.labs.overthewire.org using the password bandit0 and you are in the shell.



Level 1 -
Use ls to see files
Use the cat command with filename to read the file and grab the password.



Level 2 -
According to the challenge there is a file called “-” in the home directory and it contains the password
needed to get to the next level. The solution again is fairly simple, use the absolute path to get to the
file, in this case the following works
cat ./-



Level 3 -
This time the challenge is to read a file with spaces in it’s name, the simple way of doing this is to
surround the filename with quotes like this
cat "spaces in this filename"
There is also another way which is a bit more complicated, it is this
cat ./spaces\ in\ this\ filename
where you use escape characters to direct cat.



Level 4 -
This time the challenge is to find the password for the next level which is stored in a hidden file in the 
inhere directory. Again this is fairly easy 
using ls gives a listing but not of hidden files, -a is needed to see hidden files so
ls -la
and then there are a couple of options
cat ./inhere/.hidden
cat .hidden
which are dependent on where you are in the file tree.



Level 5 - According to the site the challenge is that the password for the next level is stored in the only 
human-readable file in the inhere directory. there is an easy way to solve this -
- go to the inhere directory
- enter file ./* to see a files and types
file07 is the only ascii text file that is human readable, cat it to see the password for the next level.

***************************************************************************************************************
Important - The overthewire site gives command that are useful for solutions but there is a command outside of
these which can be used and that command is "strings". The “strings” command command will print any string it 
finds which is human-readable and without any switch modifiers by default will only print strings of 4 bytes or 
longer in length to the screen. This will solve the challenge as well as other listed solutions
***************************************************************************************************************



Level 6 - 
This challenge is very similar to the previous one. The password for the next level is stored in a file 
somewhere under the inhere directory and has all of the following attributes: human-readable, 1033 bytes in size, 
not executable. The solution is like the previous one, use the find command with the necessary filters, the 
solution is

find ./* -size 1033c -readable ! -perm /111 - from within the inhere directory, you may not need to include all of
the filters but they are here. This will tell you that ./maybehere07/.file2 is the file that matches the criteria.
Then simply cat the file to get the password.



Level 7 - 
Again this challenge is similar to what has been done previously but as always there is an added layer of
trickery as the levels go up. This time the file can be anywhere on the server, but we are given it’s attributes. 
As you would expect the find command will have to be used in order to get to our file. The solution (one of many) -

find / -type f -user bandit7 -group bandit6 -size 33c
This returns a file here
/var/lib/dpkg/info/bandit7.password
Run cat on the file and the password



Level 8 - 
For this challenge the password needed for the next level is stored in the file data.txt next to the word 
millionth. This means that we can pipe cat to grep to solve this. This solution is this

cat data.txt | grep millionth

The grep command is a pattern matching command and is very useful.



Level 9 - 
In this particular challenge there isa need to find a unique line among many. The quickes and easiest
solution is to pipe a few commands together to do this and they do need to be in proper order.

cat data.txt | sort | uniq -u

This simply performs cat on the file and pipes it into the command “sort” which then pipes the output from sort 
into the command “uniq” with the switch operator “-u” to find the unique string. This should illustrate the
importance of the proper ordering of commands



Level 10 - 
This challenge is very similar to the preceeding couple of challenges, in this particular challenge the
goal is as usual to get the password needed for the next level which in this case is stored in the file data.txt 
among a few lines of human-readable strings starting with ‘=’ characters. Again proper use of grep will be key here
so the solution will be 

strings data.txt | grep =

The order of the commands is imporant again as the file is a binary file and cannot be easily grepped however by
using strings and then grep it will enable the password to be seen.



Level 11 - 
Similar to the previous level the needed data is stored in a file called data.txt, this challenge is a
step up though as there is a type of encoding called base64 used to encode the data. This means that there will be
a decoding of the data needed. Luckily enough Linux has a facility for decoding this data so the solution will be

base64 -d data.txt 

Base64 encoding is used in many different places and in lots of different computer languages, there are also a 
multitude of tutorials available which should be looked at.



Level 12 - 
In this challenge we are tasked with decrypting a file. When we use ls we are given a file called
data.txt. This file has been encrypted using a method called Rot13 it works by replacing a letter with the letter 
13 letters after it in the alphabet. There is a far better explanation here - 

https://en.wikipedia.org/wiki/ROT13

There are a few different ways of handling this as there are rot13 encryption and decryption sites which can be 
used as well as writing a script yourself. The solution can be found on alot of sites and is this

cat data.txt | tr a-zA-Z n-za-mN-ZA-M

Basically you are running cat on the file and then it is translated using regex to reverse.



Level 132 - 13
The challenge here is to get the password for the next level which is stored in the file data.txt, which is a 
hexdump of a file that has been repeatedly compressed. This means that the challenge itself is not difficult but
is tedious as repeated decompressing is needed. I wonder if it was possible using something like zcat to drill
through several layers of compression at once.



Level 13 - 14
Again a fairly easy challenge to tackle, the password for the next level is stored in /etc/bandit_pass/bandit14 and 
can only be read by user bandit14. For this level, you don’t get the next password but but you get a private SSH 
key that can be used to log into the next level. Use ssh -i sshkey.private bandit14@localhost to connect.



Level 14 - 15
This challenge is to connect to a certain port in this case 30000 on localhost. This one is easy and ther are a few
different tools that will do the same job, to name 2 : netcat and telnet. The solutions for both are

Telnet - telnet localhost 30000
Netcat - nc -vvn 127.0.0.1 30000

There is a very good tutorial on netcat syntax that is available at

https://www.digitalocean.com/community/tutorials/how-to-use-netcat-to-establish-and-test-tcp-and-udp-connections-
on-a-vps.

Also netcat is not regularly maintained and telnet is not advised in most practical circumstances.


Level 15 - 16
This is identical to the previous challenge but in this case there will be a need to use openssl. There is a very
useful guide and tutorial into openssl that is available at this url

https://www.madboa.com/geek/openssl/

The solution to the cahllenge is either
openssl s_client -connect 127.0.0.1:30001 or
openssl s_client -connect localhost:30001

Either one works.



Level 16 - 17
The challenge for this level is to find the password for the next level by submitting the password of the current 
level to a localhost port between 31000 and 32000. There is only one that will give the password and you will need
to use some utilities as you will need to see which uses ssl. There are a few different tools to do the job but the
one most used by people is Nmap. Nmap has its own syntax but there is a great tutorial on common uses at
http://www.cyberciti.biz/networking/nmap-command-examples-tutorials/.
The first scan in the challenge looks like this - 

nmap -p 31000-32000 localhost

This shows that there are 5 ports open and there are a couple of ways of tackling a solution, one is to test each
port manually and the other is to use nmaps inbuilt scripting to automate it, either way the port in question is
31790 and you can use ssl to connect -

openssl s_client -connect localhost:31790.

This gives an ssh key which can be used to get the next level key
make a file - eg touch sshprivatekey.private
set permissions - eg chmod 600 sshprivatekey.private
connect - ssh -i ./sshprivatekey.private bandit17@localhost

This will give you the next level.
